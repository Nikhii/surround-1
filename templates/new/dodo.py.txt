import os
import sys
from surround import Config
import subprocess

CONFIG = Config(os.path.dirname(__file__))
DOIT_CONFIG = {{'verbosity':2}}
IMAGE = "%s/%s:%s" % (CONFIG["company"], CONFIG["image"], CONFIG["version"])



def task_build():
    """Build the Docker image for the current project"""
    return {{
        'actions': ['docker build --tag=%s .' % IMAGE]
    }}

def task_remove():
    """Remove the Docker image for the current project"""


    def image_check():

    proc=subprocess.Popen(["docker", "rmi", "%s" %IMAGE,"-f"],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    proc.wait()
    (stdout,stderr)=proc.communicate()
        
    if ("Unable to find image" in stderr.decode("utf-8")) or ("No such image" in stderr.decode("utf-8")):
            print("There is no docker image. Build the image first")

    return {{
            
            'actions': [image_check]
            
            }}

def task_dev():
    """Run the main task for the project"""


    def image_check():
        
        proc=subprocess.Popen(["docker", "run", "--volume","%s" %(CONFIG["volume_path"]+"/:/app"),"%s" %IMAGE],stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        proc.wait()

        (stdout,stderr)=proc.communicate()
        
        
        if ("Unable to find image" in stderr.decode("utf-8")) or ("No such image" in stderr.decode("utf-8")):
            print("There is no docker image. Build the image first")
    
    return {{
        
        'actions': [image_check]
            
            }}

def task_prod():
    """Run the main task inside a Docker container for use in production """
    
    return {{
        'actions': ["docker run %s" % IMAGE],
        'task_dep': ["build"]
    }}

def task_train():
    """Run training mode inside the container"""
    
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    def image_check():
        
        proc=subprocess.Popen(["docker", "run", "--volume","%s" %(output_path+":/app/output"),"--volume","%s" %(data_path,":/app/data"),"%s" %IMAGE,"python3","-m","%s" %{project_name},"--mode","train"],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        proc.wait()
        (stdout,stderr)=proc.communicate()
        
        
        if ("Unable to find image" in stderr.decode("utf-8")) or ("No such image" in stderr.decode("utf-8")):
            print("There is no docker image. Build the image first")
    return {{
        'actions': [image_check]
            }}



def task_batch():
    """Run batch mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"
    

    def image_check():
        
        proc=subprocess.Popen(["docker", "run", "--volume","%s" %(output_path+":/app/output"),"--volume","%s" %(data_path,":/app/data"),"%s" %IMAGE,"python3","-m","%s" %{project_name},"--mode","batch"],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        proc.wait()
        (stdout,stderr)=proc.communicate()
        
        
        if ("Unable to find image" in stderr.decode("utf-8")) or ("No such image" in stderr.decode("utf-8")):
            print("There is no docker image. Build the image first")

    return {{'actions': [image_check]
            }}




def task_train_local():
    """Run training mode locally"""
    return {{
        'basename': 'trainLocal',
        'actions': ["%s -m {project_name} --mode train" % sys.executable]
    }}

def task_batch_local():
    """Run batch mode locally"""
    return {{
        'basename': 'batchLocal',
        'actions': ["%s -m {project_name} --mode batch" % sys.executable]
    }}
