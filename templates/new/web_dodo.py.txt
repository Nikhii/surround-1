import os
import sys
from surround import Config

CONFIG = Config(os.path.dirname(__file__))
DOIT_CONFIG = {{'verbosity':2}}
IMAGE = "%s/%s:%s" % (CONFIG["company"], CONFIG["image"], CONFIG["version"])

def task_build():
    """Build the Docker image for the current project"""
    return {{
        'actions': ['docker build --tag=%s .' % IMAGE]
    }}

def task_remove():
    """Remove the Docker image for the current project"""
    return {{
        'actions': ["""
                        if [[ "$(docker images -q %s 2> /dev/null)" == "" ]];
                        then
                        echo There is no docker image.Build the image first
                        else
                        docker rmi %s -f
                        fi""" % (IMAGE,IMAGE)]
    }}

def task_dev():
    """Run the main task for the project"""
    return {{
        'actions': ["""
                        if [[ "$(docker images -q %s 2> /dev/null)" == "" ]];
                        then
                        echo There is no docker image.Build the image first
                        else
                        docker run -p 8080:8080 --volume \"%s/\":/app %s
                        fi""" % (IMAGE,CONFIG["volume_path"],IMAGE)]
    }}

def task_prod():
    """Run the main task inside a Docker container for use in production """
    return {{
        'actions': ["docker run -p 8080:8080 %s" % IMAGE],
        'task_dep': ["build"]
    }}

def task_train():
    """Run training mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["""
                        if [[ "$(docker images -q %s 2> /dev/null)" == "" ]];
                        then
                        echo There is no docker image.Build the image first
                        else
                        docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m {project_name} --mode train
                        fi""" % (IMAGE,output_path, data_path, IMAGE)]
    }}

def task_batch():
    """Run batch mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["""
                        if [[ "$(docker images -q %s 2> /dev/null)" == "" ]];
                        then
                        echo There is no docker image.Build the image first
                        else
                        docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m {project_name} --mode batch
                        fi""" % (IMAGE,output_path, data_path, IMAGE)]
    }}

def task_train_local():
    """Run training mode locally"""
    return {{
        'basename': 'trainLocal',
        'actions': ["%s -m {project_name} --mode train" % sys.executable]
    }}

def task_batch_local():
    """Run batch mode locally"""
    return {{
        'basename': 'batchLocal',
        'actions': ["%s -m {project_name} --mode batch" % sys.executable]
    }}

def task_web():
    """Run web mode inside the container"""
    return {{
        'actions': ["""
                        if [[ "$(docker images -q %s 2> /dev/null)" == "" ]];
                        then
                        echo There is no docker image.Build the image first
                        else
                        docker run -p 8080:8080  %s python3 -m {project_name} --mode web
                        fi""" % (IMAGE,IMAGE)]
    }}

def task_web_local():
    """Run web mode locally"""
    return {{
        'basename': 'webLocal',
        'actions': ["%s -m {project_name} --mode web" % sys.executable]
    }}
