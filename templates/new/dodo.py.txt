import os
import sys
from surround import Config
import subprocess

CONFIG = Config(os.path.dirname(__file__))
DOIT_CONFIG = {{'verbosity':2}}
IMAGE = "%s/%s:%s" % (CONFIG["company"], CONFIG["image"], CONFIG["version"])

def image_check(mylist):

    proc=subprocess.Popen(mylist,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    proc.wait()
    (stdout,stderr)=proc.communicate()
        
    if stderr.decode("utf-8") != "":
        print("There is no docker image. Build the image first")

def task_build():
    """Build the Docker image for the current project"""
    return {{
        'actions': ['docker build --tag=%s .' % IMAGE]
    }}

def task_remove():
    """Remove the Docker image for the current project"""
    
    mylist=['docker', 'rmi', '{0}'.format(IMAGE),'-f']

    return {{'actions': [(image_check,)],
            'params':[{'name':'mylist',
            'long':'mylist',
            'type':list,
            'default':mylist
            }]}}



def task_dev():
    """Run the main task for the project"""
    
    mylist=['docker', 'run','--volume','{}{}'.format(CONFIG["volume_path"],"/:/app"),'{}'.format(IMAGE)]
    
    return {{'actions': [(image_check,)],
            'params':[{'name':'mylist',
            'long':'mylist',
            'type':list,
            'default':mylist
            }]}}

def task_prod():
    """Run the main task inside a Docker container for use in production """
    
    return {{
        'actions': ["docker run %s" % IMAGE],
        'task_dep': ["build"]
    }}

def task_train():
    """Run training mode inside the container"""
    
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"
    
    mylist=['docker', 'run','--volume','{}{}'.format(output_path,":/app/output"),'--volume','{}{}'.format(data_path,":/app/data"),'{}'.format(IMAGE),'python3','-m','{project_name}','--mode','train']

    return {{'actions': [(image_check,)],
            'params':[{'name':'mylist',
            'long':'mylist',
            'type':list,
            'default':mylist
            }]}}

def task_batch():
    """Run batch mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    mylist=['docker', 'run','--volume','{}{}'.format(output_path,":/app/output"),'--volume','{}{}'.format(data_path,":/app/data"),'{}'.format(IMAGE),'python3','-m','{project_name}','--mode','batch']

    return {{'actions': [(image_check,)],
            'params':[{'name':'mylist',
            'long':'mylist',
            'type':list,
            'default':mylist
            }]}}

def task_train_local():
    """Run training mode locally"""
    return {{
        'basename': 'trainLocal',
        'actions': ["%s -m {project_name} --mode train" % sys.executable]
    }}

def task_batch_local():
    """Run batch mode locally"""
    return {{
        'basename': 'batchLocal',
        'actions': ["%s -m {project_name} --mode batch" % sys.executable]
    }}
